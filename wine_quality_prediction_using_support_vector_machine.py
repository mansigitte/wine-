# -*- coding: utf-8 -*-
"""Wine Quality Prediction Using Support Vector Machine

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TkbnYnEGv7jh6ALXtnseJzTRR3hEeEKD

**Understanding Data set**

 White wine data has twelve variables.

1. fixed acidity

2. volatile acidity

3. citric acid

4. residual sugar

5. chlorides

6. free sulfur dioxide

7. total sulfur dioxide

8. density

9. pH

10. sulphates

11. alcohol

12. quality

**IMPORT LIBRARY**
"""

import pandas as pd

import numpy as np

"""**IMPORT CSV AS DATAFRAME**"""

df = pd.read_csv(r'https://github.com/YBI-Foundation/Dataset/raw/main/WhiteWineQuality.csv', sep=';')

"""OR"""

# df = pd.read_csv(r'c:\Users\YBI Foundation\Desktop\WhiteWineQuality.csv')

"""OR"""

# df = pd.read_csv(r'/content/WhiteWineQality.csv')

"""**DESCRIBE**

The first five rows of dataframe
"""

df.head()

"""Information of the dataframe"""

df.info()

"""The summary statistics"""

df.describe()

"""Column names"""

df.columns

"""Shape of dataframe"""

df.shape

"""Unique values (class or vlabel) in y variable"""

df['quality'].value_counts()

df.groupby('quality').mean()

"""Define y (dependent or label or target variable) and X (independent or features or attribute variable)"""

y = df['quality']

y.shape

y

X = df[['fixed acidity', 'volatile acidity', 'citric acid', 'residual sugar', 'chlorides', 'free sulfur dioxide', 'total sulfur dioxide', 'density', 'pH', 'sulphates', 'alcohol']]

"""OR

"""

X = df.drop(['quality'], axis=1)

X.shape

X

"""X variables standardized"""

from sklearn.preprocessing import StandardScaler

ss = StandardScaler()

X = ss.fit_transform(X)

X

"""Train Test Split"""

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X,y, test_size = 0.3, stratify= y, random_state=2529)

X_train.shape, X_test.shape, y_train.shape, y_test.shape

"""Model Train"""

from sklearn.svm import SVC

svc = SVC()

"""Model Prediction"""

svc.fit(X_train, y_train)

y_pred = svc.predict(X_test)

y_pred.shape

y_pred

"""Model Evaluation"""

from sklearn.metrics import confusion_matrix, classification_report

print(confusion_matrix(y_test, y_pred))

print(classification_report(y_test,y_pred))

"""Model re-run with two class created foe wine quality"""

y = df['quality'].apply(lambda y_value: 1 if y_value>=6 else 0)

y.value_counts()

"""**Tain Test Split**"""

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X,y, test_size = 0.3, stratify= y, random_state=2529)

X_train.shape, X_test.shape, y_train.shape, y_test.shape

"""**Model Train**"""

from sklearn.svm import SVC

svc = SVC()

svc.fit(X_train, y_train)

"""**Model Prediction**"""

y_pred = svc.predict(X_test)

y_pred.shape

y_pred

"""**Model Evaluation**"""

from sklearn.metrics import confusion_matrix, classification_report

print(confusion_matrix(y_test, y_pred))

print(classification_report(y_test,y_pred))

"""**Future Predictions**"""

df_new = df.sample(1)

df_new

df_new.shape

X_new = df_new.drop(['quality'], axis = 1)

X_new = ss.fit_transform(X_new)

y_pred_new = svc.predict(X_new)

y_pred_new